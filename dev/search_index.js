var documenterSearchIndex = {"docs":
[{"location":"Utilities/","page":"Utilities","title":"Utilities","text":"DocTestSetup = :(using DIC)","category":"page"},{"location":"Utilities/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"Utilities/","page":"Utilities","title":"Utilities","text":"Order = [:function]\nPages = [\"Utilities.md\"]","category":"page"},{"location":"Utilities/","page":"Utilities","title":"Utilities","text":"Modules = [DIC]\nOrder   = [:function]\nPages   = [\"utils.jl\"]","category":"page"},{"location":"Utilities/#DIC.neighborindices-Tuple{AbstractArray{var\"#s1\", N} where {dim, var\"#s1\"<:CartesianIndex{dim}, N}, AbstractArray, Int64}","page":"Utilities","title":"DIC.neighborindices","text":"neighborindices(subset::PixelIndices, image, npixels::Int)\n\nReturn npixels outer indices around subset. Violated indices in image are cut automatically. This is useful to give region in coarse_search.\n\njulia> image = rand(10,10);\n\njulia> neighborindices(CartesianIndices((4:6, 3:6)), image, 2)\n7×8 CartesianIndices{2, Tuple{UnitRange{Int64}, UnitRange{Int64}}}:\n CartesianIndex(2, 1)  CartesianIndex(2, 2)  …  CartesianIndex(2, 8)\n CartesianIndex(3, 1)  CartesianIndex(3, 2)     CartesianIndex(3, 8)\n CartesianIndex(4, 1)  CartesianIndex(4, 2)     CartesianIndex(4, 8)\n CartesianIndex(5, 1)  CartesianIndex(5, 2)     CartesianIndex(5, 8)\n CartesianIndex(6, 1)  CartesianIndex(6, 2)     CartesianIndex(6, 8)\n CartesianIndex(7, 1)  CartesianIndex(7, 2)  …  CartesianIndex(7, 8)\n CartesianIndex(8, 1)  CartesianIndex(8, 2)     CartesianIndex(8, 8)\n\n\n\n\n\n","category":"method"},{"location":"Utilities/#DIC.walkindices-Tuple{AbstractArray, AbstractArray}","page":"Utilities","title":"DIC.walkindices","text":"walkindices(subset, image; region = CartesianIndices(image))\n\nReturn indices to walk image with size of subset.\n\njulia> image = rand(4,4);\n\njulia> subset = rand(2,2);\n\njulia> walkindices(subset, image)\n3×3 Matrix{CartesianIndices{2, Tuple{UnitRange{Int64}, UnitRange{Int64}}}}:\n [CartesianIndex(1, 1) CartesianIndex(1, 2); CartesianIndex(2, 1) CartesianIndex(2, 2)]  …  [CartesianIndex(1, 3) CartesianIndex(1, 4); CartesianIndex(2, 3) CartesianIndex(2, 4)]\n [CartesianIndex(2, 1) CartesianIndex(2, 2); CartesianIndex(3, 1) CartesianIndex(3, 2)]     [CartesianIndex(2, 3) CartesianIndex(2, 4); CartesianIndex(3, 3) CartesianIndex(3, 4)]\n [CartesianIndex(3, 1) CartesianIndex(3, 2); CartesianIndex(4, 1) CartesianIndex(4, 2)]     [CartesianIndex(3, 3) CartesianIndex(3, 4); CartesianIndex(4, 3) CartesianIndex(4, 4)]\n\n\n\n\n\n","category":"method"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"DocTestSetup = :(using DIC)","category":"page"},{"location":"DIC Searching/#DIC-Searching","page":"DIC Searching","title":"DIC Searching","text":"","category":"section"},{"location":"DIC Searching/#Coarse-search","page":"DIC Searching","title":"Coarse search","text":"","category":"section"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"In coarse searching, the following zero-mean normalized cross-correlation is used.","category":"page"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"C = fracsum_x sum_y (A(xy) - barA) (B(xy) - barB)sqrtsum_x sum_y (A(xy) - barA)^2 sum_x sum_y (B(xy) - barB)^2","category":"page"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"With this correlation value, the subset having the highest value of C (0 leq C leq 1) will be searched.","category":"page"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"First, you need to load your image file.","category":"page"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"using DIC # hide\nimage = DIC.testimage(\"buffalo\") # use `load(filename)` for your own image\nsave(\"buffalo.tif\", image) # hide","category":"page"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"(Image: )","category":"page"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"To extract a part of image, just create sub-array.","category":"page"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"subset = image[100:300, 300:500]\nsave(\"buffalo_part1.tif\", subset) # hide","category":"page"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"(Image: )","category":"page"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"Searching this subset in image returns corresponding CartesianIndices.","category":"page"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"indices, C = coarse_search(subset, image)\nimage[indices] # this should be the same as `image[100:300, 300:500]`\nsave(\"buffalo_searched.tif\", ans) # hide","category":"page"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"(Image: )","category":"page"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"C is the correlation value defined in the range from 0 to 1. In above example, the result C should be 1 since the subset is exactly a part of the original image. You should use a subset after a certain event in practice.","category":"page"},{"location":"DIC Searching/#Fine-search","page":"DIC Searching","title":"Fine search","text":"","category":"section"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"The coarse search only considers the rigid translation of the subset with 1 pixel resolution. However, in fine search, searching is performed with sub-pixel resolution using linear interpolation, and the deformation of subset is also taken into account. See this study for more detail.","category":"page"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"using DIC # hide\nimage = DIC.testimage(\"buffalo\")\nsubset = image[100:300, 300:500]\ncenter, C = fine_search(subset, image, CartesianIndices((101:301, 301:501)))","category":"page"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"Note that, in above example, using coarse_search is enough to get an exact solution.","category":"page"},{"location":"DIC Searching/#Functions","page":"DIC Searching","title":"Functions","text":"","category":"section"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"Order = [:function]\nPages = [\"DIC Searching.md\"]","category":"page"},{"location":"DIC Searching/","page":"DIC Searching","title":"DIC Searching","text":"Modules = [DIC]\nOrder   = [:function]\nPages   = [\"searching.jl\"]","category":"page"},{"location":"DIC Searching/#DIC.coarse_search-Tuple{AbstractArray, AbstractArray}","page":"DIC Searching","title":"DIC.coarse_search","text":"coarse_search(subset, image; region = CartesianIndices(image)) -> indices, C\n\nPerform coarse search subset in image using DIC. Return the indices which has the highest correlation with subset. Use image[indices] to get the found part of image. The searching region (entire image by default) can also be specified by CartesianIndices to reduce computations.\n\nSee also neighborindices.\n\nExamples\n\njulia> image = rand(10,10);\n\njulia> subset = image[3:5, 2:3];\n\njulia> coarse_search(subset, image)\n(CartesianIndex{2}[CartesianIndex(3, 2) CartesianIndex(3, 3); CartesianIndex(4, 2) CartesianIndex(4, 3); CartesianIndex(5, 2) CartesianIndex(5, 3)], 1.0)\n\n\n\n\n\n","category":"method"},{"location":"DIC Searching/#DIC.fine_search-Union{Tuple{dim}, Tuple{T}, Tuple{AbstractArray{T, dim}, AbstractArray{T, dim}, AbstractArray{var\"#s1\", N} where {var\"#s1\"<:CartesianIndex{dim}, N}}} where {T<:Real, dim}","page":"DIC Searching","title":"DIC.fine_search","text":"fine_search(subset, image, first_guess::PixelIndices) -> center, C\n\nPerform fine search subset in image based on the Newton-Raphson method. The results by coarse_search can be used as first_guess. Note that returned center is a center coordinates (not integer any more) of searched subset in image.\n\nExamples\n\njulia> image = DIC.testimage(\"buffalo\");\n\njulia> subset = image[100:300, 300:500];\n\njulia> center, C = fine_search(subset, image, CartesianIndices((101:301, 301:501)))\n([200.00000782067005, 400.00001094427904], 0.9999999999438116)\n\n\n\n\n\n","category":"method"},{"location":"DIC Searching/#DIC.zncc-Union{Tuple{U}, Tuple{T}, Tuple{AbstractArray{T, N} where N, AbstractArray{U, N} where N}} where {T<:Real, U<:Real}","page":"DIC Searching","title":"DIC.zncc","text":"zncc(image1, image2)\n\nPerform zero-mean normalized cross-correlation between two images.\n\n\n\n\n\n","category":"method"},{"location":"#DIC","page":"Home","title":"DIC","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Digital Image Correlation (DIC) tool box for Julia","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/KeitaNakamura/DIC.jl.git","category":"page"}]
}
